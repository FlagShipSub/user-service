name: CI/CD Pipeline

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: jdbc:mysql://localhost:3306/mydatabase
      DATABASE_USERNAME: root
      DATABASE_PASSWORD: rootpassword
      EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/19.0.2-7/x64
      JAVA_HOME_19_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/19.0.2-7/x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 19
        uses: actions/setup-java@v4
        with:
          java-version: '19'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Start MySQL container
        run: |
          docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=rootpassword -e MYSQL_DATABASE=mydatabase -p 3306:3306 -d mysql:latest
          docker ps -a

      - name: Wait for MySQL to start
        run: |
          until docker exec mysql-container mysqladmin --user=root --password=rootpassword --host "127.0.0.1" ping --silent &> /dev/null ; do
            echo "Waiting for database connection..."
            sleep 2
          done
          echo "Database is up and running"

      - name: Clean Build
        run: ./gradlew clean

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/user-auth-image:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/user-auth-image:latest

      - name: Stop MySQL container
        run: docker stop mysql-container

      - name: Remove MySQL container
        run: docker rm mysql-container
